from flask import *
from flask_sqlalchemy import SQLAlchemy
import discord
from discord.ext import commands
from discord.ui import Button, View
from discord import utils
import asyncio
from settings import *
import time
from datetime import datetime, timedelta
import pytz
from sqlalchemy import Column, Integer, String, ForeignKey
import random
from collections import defaultdict
import json
import os
import logging

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = r"sqlite:///mydatabase.bd"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

logging.basicConfig(level=logging.ERROR)

class Clans(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    reputation = db.Column(db.Integer, default=0)
    clan_role_id = db.Column(db.String(100), nullable=False)
    clan_members = db.Column(db.Integer, default=0)

    quests = db.relationship('WeeklyClanQuest', back_populates='clan', cascade='all, delete-orphan')
    always_quests = db.relationship('AlwaysQuest', back_populates='clan', cascade='all, delete-orphan')

class WeeklyClanQuest(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    clan_id = db.Column(db.Integer, db.ForeignKey('clans.id', ondelete='CASCADE'), nullable=False)
    messages_sent = db.Column(db.Integer, default=0)
    voice_time = db.Column(db.Integer, default=0)
    completed = db.Column(db.Boolean, default=False)
    last_reset_timestamp = db.Column(db.Integer, default=0)

    clan = db.relationship('Clans', back_populates='quests')

class AlwaysQuest(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    clan_id = db.Column(db.Integer, db.ForeignKey('clans.id', ondelete='CASCADE'), nullable=False)
    messages_sent = db.Column(db.Integer, default=0)
    voice_time = db.Column(db.Integer, default=0)
    completed = db.Column(db.Boolean, default=False)
    user_id = db.Column(db.Integer, nullable=False)
    task = db.Column(db.String(50))
    clan = db.relationship('Clans', back_populates='always_quests')

with app.app_context():
    db.create_all()

intents = discord.Intents.default()
intents.members = True
bot = commands.Bot(command_prefix="!", intents=discord.Intents.all())

allowed_user = '1092934181979430932'
allowed_chanel = ''

def white_list(role_id):
    async def predicate(ctx):
        role = discord.utils.get(ctx.guild.roles, id=role_id)
        if role and role in ctx.author.roles:
            return True
        else:
            await ctx.send(f"–£ —Ç–µ–±—è –Ω–µ—Ç —Ä–æ–ª–∏ `{role_id}`, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
            return False
    return commands.check(predicate)

def is_authorized_user():
    async def predicate(ctx):
        return ctx.author.id == 1092934181979430932
    return commands.check(predicate)


def is_allowed_channel_or_user(allowed_channel_id, allowed_user_id):
    async def predicate(ctx):
        return ctx.channel.id == allowed_channel_id or ctx.author.id == allowed_user_id
    return commands.check(predicate)

@bot.command()
@white_list(white_list_role_id)
async def –æ–±–Ω–æ–≤–∏—Ç—å(ctx, role_mention=None):
    guild = ctx.guild

    with app.app_context():
        if role_mention:
            if not role_mention.startswith("<@&") or not role_mention.endswith(">"):
                await ctx.send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–æ–ª–∏: <@&role_id>.")
                return

            role_id = int(role_mention[3:-1])
            role = guild.get_role(role_id)
            if not role:
                await ctx.send("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return

            count = sum(1 for member in guild.members if role in member.roles)
            clan = Clans.query.filter_by(clan_role_id=role_id).first()
            if not clan:
                await ctx.send(f"–ö–ª–∞–Ω —Å —Ä–æ–ª—å—é ID {role_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            clan.clan_members = count
            db.session.commit()
            await ctx.send(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞ —Å —Ä–æ–ª—å—é {role.name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {count}.")
        else:
            clans = Clans.query.all()
            if not clans:
                await ctx.send("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–ª–∞–Ω–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
                return

            updated_clans = []
            for clan in clans:
                role = guild.get_role(int(clan.clan_role_id))
                if not role:
                    continue

                count = sum(1 for member in guild.members if role in member.roles)
                clan.clan_members = count
                updated_clans.append(f"{role.name}: {count}")
                db.session.commit()

            if updated_clans:
                await ctx.send("–û–±–Ω–æ–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–ª–∞–Ω–æ–≤:\n" + "\n".join(updated_clans))
            else:
                await ctx.send("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–æ–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")



@bot.command()
@white_list(white_list_role_id)
async def –∫–ª–∞–Ω(ctx):
    embed = discord.Embed(
        title='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–ª–∞–Ω–∞–º–∏',
        description= '–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –Ω–∏–∂–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É',
        color=discord.Color.blue()
    )
    button1 = Button(label='‚úÖ–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω‚úÖ', style=discord.ButtonStyle.green, custom_id='button1')
    button2 = Button(label='üìà–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞–Ωüìâ', style=discord.ButtonStyle.primary, custom_id='button2')
    button3 = Button(label='‚ùå–£–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω‚ùå', style=discord.ButtonStyle.danger, custom_id='button3')
    button4 = Button(label='–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è', style=discord.ButtonStyle.gray, custom_id='button4')

    view = View()
    view.add_item(button1)
    view.add_item(button2)
    view.add_item(button3)
    view.add_item(button4)

    await ctx.send(embed=embed, view=view)

    async def button1_callback(interaction):
        await interaction.response.send_message('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –∫–ª–∞–Ω–∞ (—Ç—ç–≥ –∫–ª–∞–Ω–∞).')
        await interaction.message.delete()

        def check_role(message):
            return message.author == interaction.user and message.content.startswith("<@&")

        role_msg = await bot.wait_for('message', check=check_role)
        role_id = int(role_msg.content[3:-1])

        role = utils.get(interaction.guild.roles, id=role_id)
        if role:
            with app.app_context():
                clan_name = role.name
                member_count = sum(1 for member in interaction.guild.members if role in member.roles)


                new_clan = Clans(
                    name=clan_name,
                    clan_role_id=role_id,
                    clan_members=member_count
                )
                db.session.add(new_clan)
                db.session.commit()

            await interaction.followup.send(f"–ö–ª–∞–Ω —Å —Ä–æ–ª—å—é **{role.name}** —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {member_count}")
        else:
            await interaction.followup.send("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç—ç–≥.")

    async def button2_callback(interaction):
        await interaction.response.send_message('–í—ã–±–µ—Ä–∏ –∫–ª–∞–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Ç—ç–≥ –∫–ª–∞–Ω–∞).')
        await interaction.message.delete()
        def check_role_tag(message):
            return message.author == interaction.user and message.content.startswith("<@&")
    
        try:
            msg = await bot.wait_for('message', check=check_role_tag, timeout=60)
        except asyncio.TimeoutError:
            await interaction.followup.send("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        try:
            role_id = int(msg.content[3:-1])
        except ValueError:
            await interaction.followup.send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–∞ —Ä–æ–ª–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–≥.")
            return

        guild = interaction.guild
        role = guild.get_role(role_id)
        if not role:
            await interaction.followup.send("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞.")
            return

        with app.app_context():
            clan = Clans.query.filter_by(clan_role_id=role_id).first()
            if not clan:
                await interaction.followup.send(f"–ö–ª–∞–Ω —Å —Ä–æ–ª—å—é **{role.name}** –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

        embed = discord.Embed(
            title='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
            description=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∫–ª–∞–Ω–∞ **{role.name}**?",
            color=discord.Color.blue()
        )

        confirm_button = discord.ui.Button(label="–î–∞, –∏–∑–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.primary, custom_id="confirm_edit")
        cancel_button = discord.ui.Button(label="–û—Ç–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.secondary, custom_id="cancel_edit")

        view = discord.ui.View()
        view.add_item(confirm_button)
        view.add_item(cancel_button)

        async def confirm_edit_callback(interaction):
            await interaction.message.delete()
            if interaction.user != msg.author:
                await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∫–ª–∞–Ω.")
                return

            await interaction.response.send_message(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é –¥–ª—è –∫–ª–∞–Ω–∞ **{role.name}** (—á–∏—Å–ª–æ):")

            def check_reputation_input(message):
                return message.author == interaction.user and message.content.isdigit()

            try:
                reputation_msg = await bot.wait_for('message', check=check_reputation_input, timeout=60)
                new_reputation = int(reputation_msg.content)
            except asyncio.TimeoutError:
                await interaction.followup.send("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            with app.app_context():
                clan = Clans.query.filter_by(clan_role_id=role_id).first()
                if clan:
                    try:
                        clan.reputation = new_reputation
                        db.session.commit()
                        await interaction.followup.send(f"–†–µ–ø—É—Ç–∞—Ü–∏—è –∫–ª–∞–Ω–∞ **{role.name}** —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_reputation}.")
                    except Exception as e:
                        await interaction.followup.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                else:
                    await interaction.followup.send(f"–ö–ª–∞–Ω —Å —Ä–æ–ª—å—é **{role.name}** –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        async def cancel_edit_callback(interaction):
            await interaction.message.delete()
            await interaction.response.send_message(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∫–ª–∞–Ω–∞ **{role.name}** –æ—Ç–º–µ–Ω–µ–Ω–æ.")


        confirm_button.callback = confirm_edit_callback
        cancel_button.callback = cancel_edit_callback

        await interaction.followup.send(embed=embed, view=view)


    async def button3_callback(interaction):
        await interaction.message.delete()
        await interaction.response.send_message('–í—ã–±–µ—Ä–∏ –∫–ª–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è(—Ç—ç–≥ –∫–ª–∞–Ω–∞).')

        def check(message):
            return message.author == interaction.user and message.content.startswith("<@&")
    
        msg = await bot.wait_for('message', check=check)
        role_id = int(msg.content[3:-1])

        role = utils.get(interaction.guild.roles, id=role_id)
        if role:
            with app.app_context():
                clan = Clans.query.filter_by(clan_role_id=role_id).first()
                if not clan:
                    await interaction.response.send_message(f"–ö–ª–∞–Ω —Å —Ä–æ–ª—å—é {role.name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return
                
                embed = discord.Embed(
                    title='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è',
                    description=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω **{role.name}**?",
                    color=discord.Color.red()
                )

                confirm_button = discord.ui.Button(label="–î–∞, —É–¥–∞–ª–∏—Ç—å", style=discord.ButtonStyle.danger, custom_id="confirm_delete")
                cancel_button = discord.ui.Button(label="–û—Ç–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.secondary, custom_id="cancel_delete")
            
                view = discord.ui.View()
                view.add_item(confirm_button)
                view.add_item(cancel_button)

                async def confirm_delete_callback(interaction):
                    await interaction.message.delete()
                    if interaction.user != msg.author:
                        await interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à –∫–ª–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")

                    with app.app_context():
                        clan_to_delete = Clans.query.filter_by(clan_role_id=role_id).first()
                        if clan_to_delete:
                            db.session.delete(clan_to_delete)
                            db.session.commit()
                    
                            await interaction.response.send_message(f'–ö–ª–∞–Ω {role.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')

                        return

                    

                async def cancel_delete_callback(interaction):
                    await interaction.message.delete()
                    await interaction.response.send_message(f"–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–Ω–∞ {role.name} –æ—Ç–º–µ–Ω–µ–Ω–æ.")

                confirm_button.callback = confirm_delete_callback
                cancel_button.callback = cancel_delete_callback
                
                try:
                    await interaction.followup.send(embed=embed, view=view)
                except discord.errors.InteractionResponded:
                    await interaction.followup.send("–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        else:
            await interaction.response.send_message("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç—ç–≥.")

        confirm_button.callback = confirm_delete_callback
        cancel_button.callback = cancel_delete_callback

    async def button4_callback(interaction):
        await interaction.message.delete()
        await interaction.response.send_message('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')

    button1.callback = button1_callback
    button2.callback = button2_callback
    button3.callback = button3_callback
    button4.callback = button4_callback

#–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ï –ó–ê–î–ê–ù–ò–Ø –ù–ê–ß–ò–ù–ê–Æ–¢–°–Ø –¢–£–¢ –í–ï–°–¨ –ö–û–î –ü–û–°–õ–ï –≠–¢–û–ì–û –ù–ï –û–ß–ï–ù–¨ –û–¢–ù–û–°–ò–¢–°–Ø –ö –ü–†–ï–î–´–î–£–©–ï–ú–£ –ö–†–ß –ù–ê–î–û –í–û–î–´ –°–Æ–î–ê –ù–ê–õ–ò–¢–¨ –ü–†–û–°–¢–û –î–ê–ë–´ –í–ò–î–ï–¢–¨
#–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ï –ó–ê–î–ê–ù–ò–Ø –ù–ê–ß–ò–ù–ê–Æ–¢–°–Ø –¢–£–¢ –í–ï–°–¨ –ö–û–î –ü–û–°–õ–ï –≠–¢–û–ì–û –ù–ï –û–ß–ï–ù–¨ –û–¢–ù–û–°–ò–¢–°–Ø –ö –ü–†–ï–î–´–î–£–©–ï–ú–£ –ö–†–ß –ù–ê–î–û –í–û–î–´ –°–Æ–î–ê –ù–ê–õ–ò–¢–¨ –ü–†–û–°–¢–û –î–ê–ë–´ –í–ò–î–ï–¢–¨
#–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ï –ó–ê–î–ê–ù–ò–Ø –ù–ê–ß–ò–ù–ê–Æ–¢–°–Ø –¢–£–¢ –í–ï–°–¨ –ö–û–î –ü–û–°–õ–ï –≠–¢–û–ì–û –ù–ï –û–ß–ï–ù–¨ –û–¢–ù–û–°–ò–¢–°–Ø –ö –ü–†–ï–î–´–î–£–©–ï–ú–£ –ö–†–ß –ù–ê–î–û –í–û–î–´ –°–Æ–î–ê –ù–ê–õ–ò–¢–¨ –ü–†–û–°–¢–û –î–ê–ë–´ –í–ò–î–ï–¢–¨
#–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ï –ó–ê–î–ê–ù–ò–Ø –ù–ê–ß–ò–ù–ê–Æ–¢–°–Ø –¢–£–¢ –í–ï–°–¨ –ö–û–î –ü–û–°–õ–ï –≠–¢–û–ì–û –ù–ï –û–ß–ï–ù–¨ –û–¢–ù–û–°–ò–¢–°–Ø –ö –ü–†–ï–î–´–î–£–©–ï–ú–£ –ö–†–ß –ù–ê–î–û –í–û–î–´ –°–Æ–î–ê –ù–ê–õ–ò–¢–¨ –ü–†–û–°–¢–û –î–ê–ë–´ –í–ò–î–ï–¢–¨
#–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ï –ó–ê–î–ê–ù–ò–Ø –ù–ê–ß–ò–ù–ê–Æ–¢–°–Ø –¢–£–¢ –í–ï–°–¨ –ö–û–î –ü–û–°–õ–ï –≠–¢–û–ì–û –ù–ï –û–ß–ï–ù–¨ –û–¢–ù–û–°–ò–¢–°–Ø –ö –ü–†–ï–î–´–î–£–©–ï–ú–£ –ö–†–ß –ù–ê–î–û –í–û–î–´ –°–Æ–î–ê –ù–ê–õ–ò–¢–¨ –ü–†–û–°–¢–û –î–ê–ë–´ –í–ò–î–ï–¢–¨

def get_moscow_time():
    moscow_tz = pytz.timezone('Europe/Moscow')
    moscow_time = datetime.now(moscow_tz)
    return moscow_time


@bot.event
async def on_ready():
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")
    asyncio.create_task(check_weekly_quests())
    print('–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–∞')

async def check_weekly_quests():
    await bot.wait_until_ready()
    while not bot.is_closed():
        current_time = get_moscow_time()
        if current_time.weekday() == 0 and current_time.hour == 0:
            with app.app_context():
                one_week_ago_timestamp = current_time.timestamp() - 7 * 24 * 60 * 60
                old_quests = WeeklyClanQuest.query.filter(WeeklyClanQuest.last_reset_timestamp < one_week_ago_timestamp).all()
                for quest in old_quests:
                    db.session.delete(quest)
                db.session.commit()
                print(f"–£–¥–∞–ª–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–¥–∞–Ω–∏—è: {len(old_quests)}")
                clans = Clans.query.all()
                for clan in clans:
                    last_quest = WeeklyClanQuest.query.filter_by(clan_id=clan.id).order_by(WeeklyClanQuest.last_reset_timestamp.desc()).first()
                    if not last_quest or (current_time.timestamp() - float(last_quest.last_reset_timestamp) >= 7 * 24 * 60 * 60):
                        new_quest = WeeklyClanQuest(
                            clan_id=clan.id,
                            messages_sent=0,
                            voice_time=0,
                            completed=False,
                            last_reset_timestamp=current_time.timestamp()
                        )
                        db.session.add(new_quest)
                        print(f"–ù–æ–≤—ã–π –∫–≤–µ—Å—Ç –¥–ª—è –∫–ª–∞–Ω–∞ {clan.name} –±—ã–ª —Å–æ–∑–¥–∞–Ω.")

                db.session.commit()

        await asyncio.sleep(60)

def create_always_task(user, clan):
    can_drop_task = ['text', 'text']
    dropped_task = random.choice(can_drop_task)
    print(f"–í—ã–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: {dropped_task}")

    with app.app_context():
        existing_quest = AlwaysQuest.query.filter_by(clan_id=clan.id, user_id=user.id, completed=False).first()
        if not existing_quest:
            new_quest = AlwaysQuest(
                clan_id=clan.id,
                user_id=user.id,
                messages_sent=0,
                voice_time=0,
                task=dropped_task,
                completed=False
            )
            db.session.add(new_quest)
            db.session.commit()
            print(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ –∫–ª–∞–Ω–µ {clan.name}.")
        else:
            print(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.")

@bot.event
async def on_message(message):
    if message.author.bot:
        return

    user = message.author
    clans_notified = set()

    with app.app_context():
        for role in user.roles:
            print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å: {role.name}")

            clan = Clans.query.filter_by(clan_role_id=role.id).first()
            if clan:
                print(f"–ù–∞–π–¥–µ–Ω –∫–ª–∞–Ω: {clan.name}")

                quest = AlwaysQuest.query.filter_by(clan_id=clan.id, user_id=user.id, completed=False).first()
                if quest:
                    if quest.task == 'text':
                        quest.messages_sent += 1
                        db.session.commit()
                        print(f'–õ–∏—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {quest.messages_sent}')
                        if quest.messages_sent >= 30:
                            quest.completed = True
                            clan.reputation += 10
                            db.session.commit()
                            await message.channel.send(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@{user.id}> –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!\n–ï–≥–æ –∫–ª–∞–Ω—É –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–≥—Ä–∞–¥—ã")

                            db.session.delete(quest)
                            db.session.commit()
                            print(f"–õ–∏—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è {user.id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ.")
                    elif quest.task == 'voice':
                        if quest.voice_time >= 600:
                            quest.completed = True
                            clan.reputation += 10
                            db.session.commit()
                            await message.channel.send(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <@{user.id}> –∑–∞–≤–µ—Ä—à–∏–ª –ª–∏—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!\n–ï–≥–æ –∫–ª–∞–Ω—É –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–≥—Ä–∞–¥—ã")
                            db.session.delete(quest)
                            db.session.commit()
                            print(f"–õ–∏—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è {user.id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ.")
                else:
                    create_always_task(user, clan)

                weekly_quest = WeeklyClanQuest.query.filter_by(clan_id=clan.id, completed=False).first()
                if weekly_quest:
                    weekly_quest.messages_sent += 1
                    db.session.commit()
                    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {weekly_quest.messages_sent}")
                    if weekly_quest.messages_sent >= 5000 and weekly_quest.voice_time >= 24 * 3600:
                        weekly_quest.completed = True
                        clan.reputation += 800
                        db.session.commit()
                        clans_notified.add(clan.id)
                        await message.channel.send(f"–ö–ª–∞–Ω <@&{role.id}> –∑–∞–≤–µ—Ä—à–∏–ª –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!")
                        await message.channel.send(f"–ö–ª–∞–Ω—É <@&{role.id}> –Ω–∞—á–∏—Å–ª–µ–Ω–æ 800 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏.")
                        db.session.delete(weekly_quest)
                        db.session.commit()
                        print(f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è {clan.name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ.")
                else:
                    print(f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∫–ª–∞–Ω–∞ {clan.name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await bot.process_commands(message)


@bot.command()
@white_list(white_list_role_id)
async def —Ä–æ–ª–∏(ctx):
    with app.app_context():
        clans = Clans.query.all()
        if not clans:
            await ctx.send("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–ª–∞–Ω–æ–≤.")
            return

        embed = discord.Embed(
            title="ID —Ä–æ–ª–µ–π –∫–ª–∞–Ω–æ–≤",
            description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤ –∏ –∏—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π",
            color=discord.Color.blue()
        )

        for clan in clans:
            embed.add_field(
                name=f"–ö–ª–∞–Ω: {clan.name}",
                value=f"–†–æ–ª—å ID: {clan.clan_role_id}",
                inline=False
            )

        await ctx.send(embed=embed)


@bot.command()
@white_list(white_list_role_id)
async def –ø—Ä–æ–≥—Ä–µ—Å—Å(ctx):
    with app.app_context():
        clans = Clans.query.all()
        if not clans:
            await ctx.send("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞–Ω–æ–≤.")
            return

        embed = discord.Embed(
            title="–ü—Ä–æ–≥—Ä–µ—Å—Å –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤",
            description="–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π.",
            color=discord.Color.blue()
        )

        for clan in clans:
            weekly_quest = WeeklyClanQuest.query.filter_by(clan_id=clan.id, completed=False).first()
            if weekly_quest:
                progress_messages = weekly_quest.messages_sent
                progress_voice_time = weekly_quest.voice_time
                goal_messages = 5000
                goal_voice_time = 24 * 3600

                embed.add_field(
                    name=f"–ö–ª–∞–Ω: {clan.name}",
                    value=(
                        f"–°–æ–æ–±—â–µ–Ω–∏—è: {progress_messages}/{goal_messages} ({progress_messages / goal_messages:.1%})\n"
                        f"–ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç: {progress_voice_time // 3600}—á "
                        f"{(progress_voice_time % 3600) // 60}–º/{goal_voice_time // 3600}—á "
                        f"({progress_voice_time / goal_voice_time:.1%})\n"
                        f"–°—Ç–∞—Ç—É—Å: {'–ó–∞–≤–µ—Ä—à–µ–Ω–æ' if weekly_quest.completed else '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}"
                    ),
                    inline=False
                )
            else:
                embed.add_field(
                    name=f"–ö–ª–∞–Ω: {clan.name}",
                    value="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.",
                    inline=False
                )

        await ctx.send(embed=embed)


@bot.command()
@white_list(white_list_role_id)
async def –≤—Ä–µ–º—è(ctx):
    with app.app_context():
        clans = db.session.query(Clans, WeeklyClanQuest).join(
            WeeklyClanQuest, Clans.id == WeeklyClanQuest.clan_id
        ).filter(WeeklyClanQuest.completed == False).all()

        if not clans:
            await ctx.send("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∫–ª–∞–Ω–æ–≤.")
            return

        embed = discord.Embed(
            title="–í—Ä–µ–º—è –≤–æ–π—Å–∞ –∫–ª–∞–Ω–æ–≤ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è",
            description="–°–ø–∏—Å–æ–∫ –∫–ª–∞–Ω–æ–≤ —Å –∏—Ö —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö.",
            color=discord.Color.blue()
        )

        for clan, quest in clans:
            embed.add_field(
                name=f"–ö–ª–∞–Ω: {clan.name}",
                value=f"–í—Ä–µ–º—è –≤ –≤–æ–π—Å–µ: {quest.voice_time}",
                inline=False
            )

        await ctx.send(embed=embed)

@bot.command()
@white_list(white_list_role_id)
async def —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–≤–æ–π—Å(ctx, clan_role_id: int, time_in_seconds: int):
    with app.app_context():
        clan = Clans.query.filter_by(clan_role_id=clan_role_id).first()
        if not clan:
            await ctx.send(f"–ö–ª–∞–Ω —Å —Ä–æ–ª—å—é ID {clan_role_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        quest = WeeklyClanQuest.query.filter_by(clan_id=clan.id, completed=False).first()
        if not quest:
            await ctx.send(f"–£ –∫–ª–∞–Ω–∞ {clan.name} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
            return

        quest.voice_time = time_in_seconds
        db.session.commit()

        await ctx.send(f"–í—Ä–µ–º—è –≤–æ–π—Å–∞ –¥–ª—è –∫–ª–∞–Ω–∞ {clan.name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {time_in_seconds} —Å–µ–∫—É–Ω–¥.")


@bot.command()
@white_list(white_list_role_id)
async def —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_—Å–æ–æ–±—â–µ–Ω–∏—è(ctx, clan_role_id: int, message_count: int):
    with app.app_context():
        clan = Clans.query.filter_by(clan_role_id=clan_role_id).first()
        if not clan:
            await ctx.send(f"–ö–ª–∞–Ω —Å —Ä–æ–ª—å—é ID {clan_role_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        quest = WeeklyClanQuest.query.filter_by(clan_id=clan.id, completed=False).first()
        if not quest:
            await ctx.send(f"–£ –∫–ª–∞–Ω–∞ {clan.name} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
            return

        quest.messages_sent = message_count
        db.session.commit()

        await ctx.send(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–ª–∞–Ω–∞ {clan.name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {message_count}.")

@bot.command()
@white_list(white_list_role_id)
async def –Ω–µ–¥–µ–ª—å–Ω—ã–µ(ctx):
    """–°–æ–∑–¥–∞—ë—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤."""
    with app.app_context():
        clans = Clans.query.all()
        if not clans:
            await ctx.send("–ù–µ—Ç –∫–ª–∞–Ω–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤.")
            return
        
        created_quests = 0
        for clan in clans:
            existing_quest = WeeklyClanQuest.query.filter_by(clan_id=clan.id, completed=False).first()
            if not existing_quest:
                new_quest = WeeklyClanQuest(
                    clan_id=clan.id,
                    messages_sent=0,
                    voice_time=0,
                    completed=False,
                    last_reset_timestamp=0
                )
                db.session.add(new_quest)
                created_quests += 1
        
        db.session.commit()
        
        if created_quests > 0:
            await ctx.send(f"–°–æ–∑–¥–∞–Ω–æ {created_quests} –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤.")
        else:
            await ctx.send("–î–ª—è –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–µ –∫–≤–µ—Å—Ç—ã.")

voice_start_times = defaultdict(dict)

@bot.event
async def on_voice_state_update(member, before, after):
    if before.channel == after.channel:
        return

    with app.app_context():
        for role in member.roles:
            clan = Clans.query.filter_by(clan_role_id=role.id).first()
            if not clan:
                continue

            if after.channel is not None:
                voice_start_times[member.id] = time.time()
                print(f"{member.name} –∑–∞—à–µ–ª –≤ {after.channel.name}.")

            elif before.channel is not None and member.id in voice_start_times:
                start_time = voice_start_times.pop(member.id, None)
                if start_time:
                    duration = time.time() - start_time
                    duration_minutes = duration / 60

                    quest = WeeklyClanQuest.query.filter_by(clan_id=clan.id, completed=False).first()
                    if quest:
                        quest.voice_time += duration_minutes * 70
                        db.session.commit()
                        print(f"{member.name} –¥–æ–±–∞–≤–∏–ª {duration_minutes * 120:.2f} –º–∏–Ω—É—Ç –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–ª–∞–Ω–∞ {clan.name}.")

            break

@bot.command()
@is_allowed_channel_or_user(allowed_channel_id, authorized_user)
async def –∑–∞–¥–∞–Ω–∏–µ(ctx):
    user = ctx.author

    with app.app_context():
        clan = None
        for role in user.roles:
            clan = Clans.query.filter_by(clan_role_id=role.id).first()
            if clan:
                break

        if not clan:
            await ctx.send("–í—ã –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç–µ –Ω–∏ –æ–¥–Ω–æ–º—É –∫–ª–∞–Ω—É.")
            return

        quest = WeeklyClanQuest.query.filter_by(clan_id=clan.id, completed=False).first()

        if not quest:
            await ctx.send(f"–£ –∫–ª–∞–Ω–∞ {clan.name} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
            quest = AlwaysQuest.query.filter_by(clan_id=clan.id, user_id=user.id, completed=False).first()
            messages_progress = quest.messages_sent / 30 * 100
            voice_progress = quest.voice_time / 10 * 100

            embed = discord.Embed(
            title='–ü—Ä–æ–≥—Ä–µ—Å—Å –ª–∏—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è',
            description='–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ª–∏—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî',
            color=discord.Color.orange()
            )

            if quest.task == 'text':
                embed.add_field(
                    name="–¢–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
                    value=f" - {quest.messages_sent}/30 ({messages_progress:.2f}%)",
                    inline=False
                )
            elif quest.task == 'voice':
                embed.add_field(
                    name="–ì–æ–ª–æ—Å–æ–≤–æ–µ –≤—Ä–µ–º—è",
                    value=f" - {quest.voice_time / 1:.2f}/10 –º–∏–Ω—É—Ç ({voice_progress:.2f}%)",
                    inline=False
                )
            embed.set_footer(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")

            await ctx.send(embed=embed)
            
            return

        messages_progress = quest.messages_sent / 5000 * 100
        voice_progress = quest.voice_time / (24 * 3600) * 100
        embed = discord.Embed(
            title=f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞ {clan.name}",
            description='‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî',
            color=discord.Color.orange()
        )
        embed.add_field(
            name="–°–æ–æ–±—â–µ–Ω–∏—è",
            value=f" - {quest.messages_sent}/5000 ({messages_progress:.2f}%)",
            inline=False
        )
        embed.add_field(
            name="–ì–æ–ª–æ—Å–æ–≤–æ–µ –≤—Ä–µ–º—è",
            value=f"{quest.voice_time / 3600:.2f}/24 —á–∞—Å–æ–≤ ({voice_progress:.2f}%)",
            inline=False
        )
        embed.set_footer(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")

        await ctx.send(embed=embed)

        quest = AlwaysQuest.query.filter_by(clan_id=clan.id, user_id=user.id, completed=False).first()
        messages_progress = quest.messages_sent / 30 * 100
        voice_progress = quest.voice_time / 600 * 100

        embed = discord.Embed(
            title='–ü—Ä–æ–≥—Ä–µ—Å—Å –ª–∏—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è',
            description='–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ª–∏—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî',
            color=discord.Color.orange()
        )

        if quest.task == 'text':
            embed.add_field(
                name="–¢–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
                value=f" - {quest.messages_sent}/30 ({messages_progress:.2f}%)",
                inline=False
            )
        elif quest.task == 'voice':
            embed.add_field(
                name="–ì–æ–ª–æ—Å–æ–≤–æ–µ –≤—Ä–µ–º—è",
                value=f" - {quest.voice_time / 600:.2f}/10 –º–∏–Ω—É—Ç ({voice_progress:.2f}%)",
                inline=False
            )
        embed.set_footer(text="–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")

        await ctx.send(embed=embed)


#–¢–û–ü–´ –ö–õ–ê–ù–û–í
#–¢–û–ü–´ –ö–õ–ê–ù–û–í
#–¢–û–ü–´ –ö–õ–ê–ù–û–í

def get_top_clans(limit=10):
    top_clans = Clans.query.order_by(Clans.reputation.desc()).limit(limit).all()
    return top_clans

@bot.command()
@is_allowed_channel_or_user(allowed_channel_id, authorized_user)
async def —Ç–æ–ø(ctx, limit: int = 10):
    with app.app_context():
        top_clans = Clans.query.order_by(Clans.reputation.desc()).limit(limit).all()

        if not top_clans:
            await ctx.send("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–ª–∞–Ω–æ–≤.")
            return

        embed = discord.Embed(
            title=f"–¢–æ–ø {limit} –∫–ª–∞–Ω–æ–≤ –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏",
            description="–°–ø–∏—Å–æ–∫ –∫–ª–∞–Ω–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî",
            color=discord.Color.gold()
        )

        for i, clan in enumerate(top_clans, 1):
            embed.add_field(
                name=f"{i}. **{clan.name}**",
                value=f" - –†–µ–ø—É—Ç–∞—Ü–∏—è –∫–ª–∞–Ω–∞: {clan.reputation}\n - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞: {clan.clan_members}\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî",
                inline=False
            )

        await ctx.send(embed=embed)

@bot.command()
@is_allowed_channel_or_user(allowed_channel_id, authorized_user)
async def —Ö–µ–ª–ø(ctx):
    embed = discord.Embed(
        title='**–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥**',
        description='–í–æ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±–æ—Ç–µ.',
        color=discord.Color.blue()
    )

    commands_list = {
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã": [
            "!—Ç–æ–ø - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –∫–ª–∞–Ω–æ–≤ –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏",
            "!–∑–∞–¥–∞–Ω–∏–µ - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–ª–∞–Ω–æ–≤–æ–≥–æ –∏ –ª–∏—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è",
            "!–∏–≥—Ä–∞ - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ —Å –±–æ—Ç–æ–º"
        ],
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã": [
            "!–∫–ª–∞–Ω - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–Ω–∞–º–∏",
            "!–æ–±–Ω–æ–≤–∏—Ç—å - –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞ –≤ –ë–î",
            "!—Ä–æ–ª–∏ - –ø–æ–∫–∞–∑–∞—Ç—å ID –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤—ã—Ö —Ä–æ–ª–µ–π",
            "!–ø—Ä–æ–≥—Ä–µ—Å—Å - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
            "!–≤—Ä–µ–º—è - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤ –≤–æ–π—Å–µ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è",
            "!—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–≤–æ–π—Å [ID —Ä–æ–ª–∏] [–≤—Ä–µ–º—è] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–ª–∞–Ω–∞",
            "!—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_—Å–æ–æ–±—â–µ–Ω–∏—è [ID —Ä–æ–ª–∏] [–∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–ª–∞–Ω–∞",
            "!–Ω–µ–¥–µ–ª—å–Ω—ã–µ - —Å–æ–∑–¥–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤",
            "!—Ç–µ–≥ - –ø–∏–Ω–≥ –≤—Å–µ—Ö –∫–ª–∞–Ω–æ–≤"
        ],
        "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –º–∏–Ω–∏-–∏–≥—Ä—ã": [
            "!–∏–≥—Ä–∞ - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏",
  
        ]
    }

    for category, cmds in commands_list.items():
        embed.add_field(
            name=category,
            value="\n".join(cmds),
            inline=False
        )
    
    await ctx.send(embed=embed)


@bot.command()
@white_list(white_list_role_id)
async def —Ç–µ–≥(ctx):
    with app.app_context():
        clans = Clans.query.all()

        if not clans:
            await ctx.send("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–ª–∞–Ω–æ–≤ –¥–ª—è –ø–∏–Ω–≥–∞.")
            return

        mentions = [f"<@&{clan.clan_role_id}>" for clan in clans if clan.clan_role_id]

        if not mentions:
            await ctx.send("–£ –∫–ª–∞–Ω–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç role_id –¥–ª—è –ø–∏–Ω–≥–∞.")
            return

        chunk_size = 2000
        chunks = []
        current_chunk = ""

        for mention in mentions:
            if len(current_chunk) + len(mention) + 1 > chunk_size:
                chunks.append(current_chunk.strip())
                current_chunk = ""
            current_chunk += mention + " "

        if current_chunk:
            chunks.append(current_chunk.strip())

        for chunk in chunks:
            await ctx.send(chunk)

# –ú–ò–ù–ò–ò–ì–†–´ –ò –°–û–ë–´–¢–ò–Ø
# –ú–ò–ù–ò–ò–ì–†–´ –ò –°–û–ë–´–¢–ò–Ø
# –ú–ò–ù–ò–ò–ì–†–´ –ò –°–û–ë–´–¢–ò–Ø

HISTORY_FILE = "game_history.json"
EMPTY_CELL = "‚¨ú"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä
def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r") as file:
            return json.load(file)
    return []

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä
def save_history(history):
    with open(HISTORY_FILE, "w") as file:
        json.dump(history, file, indent=4)

# –ê–ª–≥–æ—Ä–∏—Ç–º MinMax
def minmax(board, depth, is_maximizing):
    winner = check_winner(board)
    if winner == "O":
        return 1
    elif winner == "X":
        return -1
    elif winner == "Draw":
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for i in range(9):
            if board[i] == EMPTY_CELL:
                board[i] = "O"
                score = minmax(board, depth + 1, False)
                board[i] = EMPTY_CELL
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for i in range(9):
            if board[i] == EMPTY_CELL:
                board[i] = "X"
                score = minmax(board, depth + 1, True)
                board[i] = EMPTY_CELL
                best_score = min(score, best_score)
        return best_score

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ò–ò (MinMax)
def get_ai_move(board):
    best_move = None
    best_score = -float('inf')
    
    for i in range(9):
        if board[i] == EMPTY_CELL:
            board[i] = "O"
            score = minmax(board, 0, False)
            board[i] = EMPTY_CELL
            if score > best_score:
                best_score = score
                best_move = i
                
    return best_move

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
def check_winner(board):
    winning_combinations = [
        (0, 1, 2), (3, 4, 5), (6, 7, 8),
        (0, 3, 6), (1, 4, 7), (2, 5, 8),
        (0, 4, 8), (2, 4, 6)
    ]
    for a, b, c in winning_combinations:
        if board[a] == board[b] == board[c] and board[a] != EMPTY_CELL:
            return board[a]
    return None if EMPTY_CELL in board else "Draw"

# –ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
class TicTacToeView(discord.ui.View):
    def __init__(self, creator):
        super().__init__(timeout=180)
        self.board = [EMPTY_CELL] * 9
        self.current_turn = "X"
        self.creator = creator  # –°–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã
        self.history = load_history()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–≥—Ä—ã
        for i in range(9):
            self.add_item(TicTacToeButton(i))

    def update_buttons(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–æ—Å–∫–∏."""
        for child in self.children:
            if isinstance(child, TicTacToeButton):
                child.label = self.board[child.index]
                child.disabled = self.board[child.index] != EMPTY_CELL

    async def disable_all_buttons(self, interaction):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã."""
        for child in self.children:
            if isinstance(child, TicTacToeButton):
                child.disabled = True

    async def process_turn(self, interaction, index):
        if interaction.user != self.creator:
            await interaction.response.send_message("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —Ö–æ–¥—ã!", ephemeral=True)
            return

        if self.board[index] != EMPTY_CELL:
            return

        # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
        self.board[index] = "X"
        winner = check_winner(self.board)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
        if winner:
            await self.end_game(interaction, winner)
            return

        # –•–æ–¥ –ò–ò
        self.current_turn = "O"
        ai_move = get_ai_move(self.board)
        self.board[ai_move] = "O"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –ò–ò
        winner = check_winner(self.board)
        if winner:
            await self.end_game(interaction, winner)
            return

        # –°–º–µ–Ω–∞ —Ö–æ–¥–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞
        self.current_turn = "X"
        self.update_buttons()
        await interaction.response.edit_message(content="–í–∞—à —Ö–æ–¥!", view=self)

    async def end_game(self, interaction, winner):
        await self.disable_all_buttons(interaction)  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        self.update_buttons()  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –º–µ—Ç–∫–∞–º–∏
        self.history.append({"board": self.board[:], "winner": winner})  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        save_history(self.history)

        clan_message = ""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —è–≤–ª—è–µ—Ç—Å—è –∏–≥—Ä–æ–∫ (X)
        if winner == "X":
            with app.app_context():
                for role in self.creator.roles:
                    clan = Clans.query.filter_by(clan_role_id=role.id).first()
                    if clan:
                        clan.reputation += 50  # –ù–∞—á–∏—Å–ª—è–µ–º 50 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
                        db.session.commit()
                        clan_message = f"–ö–ª–∞–Ω—É {clan.name} –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 50 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏!"
                        break

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if winner == "Draw":
            message = "–ù–∏—á—å—è!"
        elif winner == "X":
            message = f"–ò–≥—Ä–æ–∫ {winner} –ø–æ–±–µ–¥–∏–ª! {clan_message}"
        else:
            message = f"–ò–≥—Ä–æ–∫ {winner} –ø–æ–±–µ–¥–∏–ª!"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if interaction.response.is_done():
                await interaction.followup.send(content=message, view=self)
            else:
                await interaction.response.send_message(content=message, view=self)
        except discord.errors.NotFound:
            await interaction.channel.send(content=message)


class TicTacToeButton(discord.ui.Button):
    def __init__(self, index):
        super().__init__(style=discord.ButtonStyle.secondary, label=EMPTY_CELL, row=index // 3)
        self.index = index
    async def callback(self, interaction: discord.Interaction):
        view: TicTacToeView = self.view
        await view.process_turn(interaction, self.index)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
@bot.command()
async def –∏–≥—Ä–∞(ctx):
    view = TicTacToeView(creator=ctx.author)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–≥—Ä—ã
    await ctx.send(f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–∞—à —Ö–æ–¥, {ctx.author.mention}!", view=view)

bot.run(token)
